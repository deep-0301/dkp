{"ast":null,"code":"import _toConsumableArray from \"D:\\\\2022_projects\\\\Portfolio\\\\portfolio-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { color } from '../color/index.mjs';\nimport { number } from '../numbers/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\nvar colorToken = \"${c}\";\nvar numberToken = \"${n}\";\n\nfunction test(v) {\n  var _a, _b;\n\n  return isNaN(v) && isString(v) && (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;\n}\n\nfunction analyseComplexValue(v) {\n  if (typeof v === \"number\") v = \"\".concat(v);\n  var values = [];\n  var numColors = 0;\n  var numNumbers = 0;\n  var colors = v.match(colorRegex);\n\n  if (colors) {\n    numColors = colors.length; // Strip colors from input so they're not picked up by number regex.\n    // There's a better way to combine these regex searches, but its beyond my regex skills\n\n    v = v.replace(colorRegex, colorToken);\n    values.push.apply(values, _toConsumableArray(colors.map(color.parse)));\n  }\n\n  var numbers = v.match(floatRegex);\n\n  if (numbers) {\n    numNumbers = numbers.length;\n    v = v.replace(floatRegex, numberToken);\n    values.push.apply(values, _toConsumableArray(numbers.map(number.parse)));\n  }\n\n  return {\n    values: values,\n    numColors: numColors,\n    numNumbers: numNumbers,\n    tokenised: v\n  };\n}\n\nfunction parse(v) {\n  return analyseComplexValue(v).values;\n}\n\nfunction createTransformer(source) {\n  var _analyseComplexValue = analyseComplexValue(source),\n      values = _analyseComplexValue.values,\n      numColors = _analyseComplexValue.numColors,\n      tokenised = _analyseComplexValue.tokenised;\n\n  var numValues = values.length;\n  return function (v) {\n    var output = tokenised;\n\n    for (var i = 0; i < numValues; i++) {\n      output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color.transform(v[i]) : sanitize(v[i]));\n    }\n\n    return output;\n  };\n}\n\nvar convertNumbersToZero = function convertNumbersToZero(v) {\n  return typeof v === \"number\" ? 0 : v;\n};\n\nfunction getAnimatableNone(v) {\n  var parsed = parse(v);\n  var transformer = createTransformer(v);\n  return transformer(parsed.map(convertNumbersToZero));\n}\n\nvar complex = {\n  test: test,\n  parse: parse,\n  createTransformer: createTransformer,\n  getAnimatableNone: getAnimatableNone\n};\nexport { analyseComplexValue, complex };","map":null,"metadata":{},"sourceType":"module"}