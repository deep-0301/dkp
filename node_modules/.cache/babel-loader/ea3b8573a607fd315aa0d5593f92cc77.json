{"ast":null,"code":"import _slicedToArray from \"D:\\\\2022_projects\\\\Portfolio\\\\portfolio-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\2022_projects\\\\Portfolio\\\\portfolio-starter\\\\src\\\\Context.js\";\n\nimport React, { useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { lightTheme, darkTheme } from './themes'; // Import your themes here\n\nvar ThemeManager = function ThemeManager(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(lightTheme),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentTheme = _useState2[0],\n      setCurrentTheme = _useState2[1];\n\n  var toggleTheme = function toggleTheme() {\n    setCurrentTheme(currentTheme === lightTheme ? darkTheme : lightTheme);\n  };\n\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: currentTheme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, children(toggleTheme));\n};\n\nexport default ThemeManager; // import React from \"react\";\n// import { createContext, useReducer } from \"react\";\n// export const themeContext = createContext();\n// export const initialState = { darkMode: true };\n// export const themeReducer = (state, action) => {\n//     switch (action.type) {\n//         case \"toggle\":\n//             return { darkMode: !state.darkMode };\n//         default:\n//             return state;\n//     }\n// };\n// export const ThemeProvider = (props) => {\n//     const [state, dispatch] = useReducer(themeReducer, initialState);\n//     return (\n//         <themeContext.Provider value={{ state, dispatch }}>{props.children}</themeContext.Provider>\n//     );\n// };","map":{"version":3,"names":["React","useState","ThemeProvider","lightTheme","darkTheme","ThemeManager","children","currentTheme","setCurrentTheme","toggleTheme"],"sources":["D:/2022_projects/Portfolio/portfolio-starter/src/Context.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { lightTheme, darkTheme } from './themes'; // Import your themes here\r\n\r\nconst ThemeManager = ({ children }) => {\r\n    const [currentTheme, setCurrentTheme] = useState(lightTheme);\r\n\r\n    const toggleTheme = () => {\r\n        setCurrentTheme(currentTheme === lightTheme ? darkTheme : lightTheme);\r\n    };\r\n\r\n    return (\r\n        <ThemeProvider theme={currentTheme}>\r\n            {children(toggleTheme)}\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default ThemeManager;\r\n\r\n\r\n\r\n// import React from \"react\";\r\n// import { createContext, useReducer } from \"react\";\r\n\r\n// export const themeContext = createContext();\r\n\r\n// export const initialState = { darkMode: true };\r\n\r\n// export const themeReducer = (state, action) => {\r\n//     switch (action.type) {\r\n//         case \"toggle\":\r\n//             return { darkMode: !state.darkMode };\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n\r\n// export const ThemeProvider = (props) => {\r\n//     const [state, dispatch] = useReducer(themeReducer, initialState);\r\n//     return (\r\n//         <themeContext.Provider value={{ state, dispatch }}>{props.children}</themeContext.Provider>\r\n//     );\r\n// };"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,UAAtC,C,CAAkD;;AAElD,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAkB;EAAA,IAAfC,QAAe,QAAfA,QAAe;;EAAA,gBACKL,QAAQ,CAACE,UAAD,CADb;EAAA;EAAA,IAC5BI,YAD4B;EAAA,IACdC,eADc;;EAGnC,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;IACtBD,eAAe,CAACD,YAAY,KAAKJ,UAAjB,GAA8BC,SAA9B,GAA0CD,UAA3C,CAAf;EACH,CAFD;;EAIA,oBACI,oBAAC,aAAD;IAAe,KAAK,EAAEI,YAAtB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACKD,QAAQ,CAACG,WAAD,CADb,CADJ;AAKH,CAZD;;AAcA,eAAeJ,YAAf,C,CAIA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}