{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"D:\\\\2022_projects\\\\Portfolio\\\\portfolio-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _toConsumableArray = require(\"D:\\\\2022_projects\\\\Portfolio\\\\portfolio-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar tslib = require('tslib');\n\nvar heyListen = require('hey-listen');\n\nvar utils = require('@motionone/utils');\n\nvar animateStyle = require('../animate/animate-style.cjs.js');\n\nvar style = require('../animate/style.cjs.js');\n\nvar options = require('../animate/utils/options.cjs.js');\n\nvar hasChanged = require('./utils/has-changed.cjs.js');\n\nvar resolveVariant = require('./utils/resolve-variant.cjs.js');\n\nvar schedule = require('./utils/schedule.cjs.js');\n\nvar inView = require('./gestures/in-view.cjs.js');\n\nvar hover = require('./gestures/hover.cjs.js');\n\nvar press = require('./gestures/press.cjs.js');\n\nvar events = require('./utils/events.cjs.js');\n\nvar gestures = {\n  inView: inView.inView,\n  hover: hover.hover,\n  press: press.press\n};\n/**\n * A list of state types, in priority order. If a value is defined in\n * a righter-most type, it will override any definition in a lefter-most.\n */\n\nvar stateTypes = [\"initial\", \"animate\"].concat(_toConsumableArray(Object.keys(gestures)), [\"exit\"]);\n/**\n * A global store of all generated motion states. This can be used to lookup\n * a motion state for a given Element.\n */\n\nvar mountedStates = new WeakMap();\n\nfunction createMotionState() {\n  var _marked = /*#__PURE__*/_regeneratorRuntime.mark(animateUpdates);\n\n  var options$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var parent = arguments.length > 1 ? arguments[1] : undefined;\n\n  /**\n   * The element represented by the motion state. This is an empty reference\n   * when we create the state to support SSR and allow for later mounting\n   * in view libraries.\n   *\n   * @ts-ignore\n   */\n  var element;\n  /**\n   * Calculate a depth that we can use to order motion states by tree depth.\n   */\n\n  var depth = parent ? parent.getDepth() + 1 : 0;\n  /**\n   * Track which states are currently active.\n   */\n\n  var activeStates = {\n    initial: true,\n    animate: true\n  };\n  /**\n   * A map of functions that, when called, will remove event listeners for\n   * a given gesture.\n   */\n\n  var gestureSubscriptions = {};\n  /**\n   * Initialise a context to share through motion states. This\n   * will be populated by variant names (if any).\n   */\n\n  var context = {};\n\n  var _iterator = _createForOfIteratorHelper(stateTypes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var name = _step.value;\n      context[name] = typeof options$1[name] === \"string\" ? options$1[name] : parent === null || parent === void 0 ? void 0 : parent.getContext()[name];\n    }\n    /**\n     * If initial is set to false we use the animate prop as the initial\n     * animation state.\n     */\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var initialVariantSource = options$1.initial === false ? \"animate\" : \"initial\";\n  /**\n   * Destructure an initial target out from the resolved initial variant.\n   */\n\n  var _a = resolveVariant.resolveVariant(options$1[initialVariantSource] || context[initialVariantSource], options$1.variants) || {},\n      target = tslib.__rest(_a, [\"transition\"]);\n  /**\n   * The base target is a cached map of values that we'll use to animate\n   * back to if a value is removed from all active state types. This\n   * is usually the initial value as read from the DOM, for instance if\n   * it hasn't been defined in initial.\n   */\n\n\n  var baseTarget = Object.assign({}, target);\n  /**\n   * A generator that will be processed by the global animation scheduler.\n   * This yeilds when it switches from reading the DOM to writing to it\n   * to prevent layout thrashing.\n   */\n\n  function animateUpdates() {\n    var _a, _b, prevTarget, animationOptions, _iterator2, _step2, name, variant, key, allTargetKeys, animationFactories, animations, animationTarget;\n\n    return _regeneratorRuntime.wrap(function animateUpdates$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            prevTarget = target;\n            target = {};\n            animationOptions = {};\n            _iterator2 = _createForOfIteratorHelper(stateTypes);\n            _context.prev = 4;\n\n            _iterator2.s();\n\n          case 6:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 24;\n              break;\n            }\n\n            name = _step2.value;\n\n            if (activeStates[name]) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"continue\", 22);\n\n          case 10:\n            variant = resolveVariant.resolveVariant(options$1[name]);\n\n            if (variant) {\n              _context.next = 13;\n              break;\n            }\n\n            return _context.abrupt(\"continue\", 22);\n\n          case 13:\n            _context.t0 = _regeneratorRuntime.keys(variant);\n\n          case 14:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 22;\n              break;\n            }\n\n            key = _context.t1.value;\n\n            if (!(key === \"transition\")) {\n              _context.next = 18;\n              break;\n            }\n\n            return _context.abrupt(\"continue\", 14);\n\n          case 18:\n            target[key] = variant[key];\n            animationOptions[key] = options.getOptions((_b = (_a = variant.transition) !== null && _a !== void 0 ? _a : options$1.transition) !== null && _b !== void 0 ? _b : {}, key);\n            _context.next = 14;\n            break;\n\n          case 22:\n            _context.next = 6;\n            break;\n\n          case 24:\n            _context.next = 29;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t2 = _context[\"catch\"](4);\n\n            _iterator2.e(_context.t2);\n\n          case 29:\n            _context.prev = 29;\n\n            _iterator2.f();\n\n            return _context.finish(29);\n\n          case 32:\n            allTargetKeys = new Set([].concat(_toConsumableArray(Object.keys(target)), _toConsumableArray(Object.keys(prevTarget))));\n            animationFactories = [];\n            allTargetKeys.forEach(function (key) {\n              var _a;\n\n              if (target[key] === undefined) {\n                target[key] = baseTarget[key];\n              }\n\n              if (hasChanged.hasChanged(prevTarget[key], target[key])) {\n                (_a = baseTarget[key]) !== null && _a !== void 0 ? _a : baseTarget[key] = style.style.get(element, key);\n                animationFactories.push(animateStyle.animateStyle(element, key, target[key], animationOptions[key]));\n              }\n            }); // Wait for all animation states to read from the DOM\n\n            _context.next = 37;\n            return;\n\n          case 37:\n            animations = animationFactories.map(function (factory) {\n              return factory();\n            }).filter(Boolean);\n\n            if (animations.length) {\n              _context.next = 40;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 40:\n            animationTarget = target;\n            element.dispatchEvent(events.motionEvent(\"motionstart\", animationTarget));\n            Promise.all(animations.map(function (animation) {\n              return animation.finished;\n            })).then(function () {\n              element.dispatchEvent(events.motionEvent(\"motioncomplete\", animationTarget));\n            }).catch(utils.noop);\n\n          case 43:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _marked, null, [[4, 26, 29, 32]]);\n  }\n\n  var setGesture = function setGesture(name, isActive) {\n    return function () {\n      activeStates[name] = isActive;\n      schedule.scheduleAnimation(state);\n    };\n  };\n\n  var updateGestureSubscriptions = function updateGestureSubscriptions() {\n    for (var name in gestures) {\n      var isGestureActive = gestures[name].isActive(options$1);\n      var remove = gestureSubscriptions[name];\n\n      if (isGestureActive && !remove) {\n        gestureSubscriptions[name] = gestures[name].subscribe(element, {\n          enable: setGesture(name, true),\n          disable: setGesture(name, false)\n        }, options$1);\n      } else if (!isGestureActive && remove) {\n        remove();\n        delete gestureSubscriptions[name];\n      }\n    }\n  };\n\n  var state = {\n    update: function update(newOptions) {\n      if (!element) return;\n      options$1 = newOptions;\n      updateGestureSubscriptions();\n      schedule.scheduleAnimation(state);\n    },\n    setActive: function setActive(name, isActive) {\n      if (!element) return;\n      activeStates[name] = isActive;\n      schedule.scheduleAnimation(state);\n    },\n    animateUpdates: animateUpdates,\n    getDepth: function getDepth() {\n      return depth;\n    },\n    getTarget: function getTarget() {\n      return target;\n    },\n    getOptions: function getOptions() {\n      return options$1;\n    },\n    getContext: function getContext() {\n      return context;\n    },\n    mount: function mount(newElement) {\n      heyListen.invariant(Boolean(newElement), \"Animation state must be mounted with valid Element\");\n      element = newElement;\n      mountedStates.set(element, state);\n      updateGestureSubscriptions();\n      return function () {\n        mountedStates.delete(element);\n        schedule.unscheduleAnimation(state);\n\n        for (var key in gestureSubscriptions) {\n          gestureSubscriptions[key]();\n        }\n      };\n    },\n    isMounted: function isMounted() {\n      return Boolean(element);\n    }\n  };\n  return state;\n}\n\nexports.createMotionState = createMotionState;\nexports.mountedStates = mountedStates;","map":null,"metadata":{},"sourceType":"script"}