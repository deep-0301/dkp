{"ast":null,"code":"import _objectWithoutProperties from \"D:\\\\2022_projects\\\\Portfolio\\\\portfolio-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"D:\\\\2022_projects\\\\Portfolio\\\\portfolio-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { findSpring, calcAngularFreq } from './find-spring.mjs';\nimport { velocityPerSecond } from '../../utils/velocity-per-second.mjs';\nvar durationKeys = [\"duration\", \"bounce\"];\nvar physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\n\nfunction isSpringType(options, keys) {\n  return keys.some(function (key) {\n    return options[key] !== undefined;\n  });\n}\n\nfunction getSpringOptions(options) {\n  var springOptions = _objectSpread({\n    velocity: 0.0,\n    stiffness: 100,\n    damping: 10,\n    mass: 1.0,\n    isResolvedFromDuration: false\n  }, options); // stiffness/damping/mass overrides duration/bounce\n\n\n  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {\n    var derived = findSpring(options);\n    springOptions = _objectSpread({}, springOptions, derived, {\n      velocity: 0.0,\n      mass: 1.0\n    });\n    springOptions.isResolvedFromDuration = true;\n  }\n\n  return springOptions;\n}\n\nvar velocitySampleDuration = 5;\n/**\n * This is based on the spring implementation of Wobble https://github.com/skevy/wobble\n */\n\nfunction spring(_ref) {\n  var keyframes = _ref.keyframes,\n      _ref$restSpeed = _ref.restSpeed,\n      restSpeed = _ref$restSpeed === void 0 ? 2 : _ref$restSpeed,\n      _ref$restDelta = _ref.restDelta,\n      restDelta = _ref$restDelta === void 0 ? 0.01 : _ref$restDelta,\n      options = _objectWithoutProperties(_ref, [\"keyframes\", \"restSpeed\", \"restDelta\"]);\n\n  var origin = keyframes[0];\n  var target = keyframes[keyframes.length - 1];\n  /**\n   * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n   * to reduce GC during animation.\n   */\n\n  var state = {\n    done: false,\n    value: origin\n  };\n\n  var _getSpringOptions = getSpringOptions(options),\n      stiffness = _getSpringOptions.stiffness,\n      damping = _getSpringOptions.damping,\n      mass = _getSpringOptions.mass,\n      velocity = _getSpringOptions.velocity,\n      duration = _getSpringOptions.duration,\n      isResolvedFromDuration = _getSpringOptions.isResolvedFromDuration;\n\n  var resolveSpring = zero;\n  var initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n  var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n\n  function createSpring() {\n    var initialDelta = target - origin;\n    var undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n    /**\n     * If we're working within what looks like a 0-1 range, change the default restDelta\n     * to 0.01\n     */\n\n    if (restDelta === undefined) {\n      restDelta = Math.min(Math.abs(target - origin) / 100, 0.4);\n    }\n\n    if (dampingRatio < 1) {\n      var angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio); // Underdamped spring\n\n      resolveSpring = function resolveSpring(t) {\n        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));\n      };\n    } else if (dampingRatio === 1) {\n      // Critically damped spring\n      resolveSpring = function resolveSpring(t) {\n        return target - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);\n      };\n    } else {\n      // Overdamped spring\n      var dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n\n      resolveSpring = function resolveSpring(t) {\n        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t); // When performing sinh or cosh values can hit Infinity so we cap them here\n\n        var freqForT = Math.min(dampedAngularFreq * t, 300);\n        return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;\n      };\n    }\n  }\n\n  createSpring();\n  return {\n    next: function next(t) {\n      var current = resolveSpring(t);\n\n      if (!isResolvedFromDuration) {\n        var currentVelocity = initialVelocity;\n\n        if (t !== 0) {\n          /**\n           * We only need to calculate velocity for under-damped springs\n           * as over- and critically-damped springs can't overshoot, so\n           * checking only for displacement is enough.\n           */\n          if (dampingRatio < 1) {\n            var prevT = Math.max(0, t - velocitySampleDuration);\n            currentVelocity = velocityPerSecond(current - resolveSpring(prevT), t - prevT);\n          } else {\n            currentVelocity = 0;\n          }\n        }\n\n        var isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n        var isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n      } else {\n        state.done = t >= duration;\n      }\n\n      state.value = state.done ? target : current;\n      return state;\n    },\n    flipTarget: function flipTarget() {\n      initialVelocity = -initialVelocity;\n      var _ref2 = [target, origin];\n      origin = _ref2[0];\n      target = _ref2[1];\n      createSpring();\n    }\n  };\n}\n\nspring.needsInterpolation = function (a, b) {\n  return typeof a === \"string\" || typeof b === \"string\";\n};\n\nvar zero = function zero(_t) {\n  return 0;\n};\n\nexport { spring };","map":null,"metadata":{},"sourceType":"module"}